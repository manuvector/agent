name: CI + CD

on:
  pull_request:
  push:
    branches:
      - '**'   # run tests on every push; deploy is branch-gated below

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: user
          POSTGRES_PASSWORD: pass
        ports: [5432:5432]
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
    env:
      DATABASE_URL: postgres://user:pass@localhost:5432/test_db
      SECRET_KEY: test-secret
      OPENAI_API_KEY: dummy
      GOOGLE_CLIENT_ID: dummy
      GOOGLE_CLIENT_SECRET: dummy
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Enable pgvector
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          until psql "$DATABASE_URL" -c '\l' >/dev/null 2>&1; do echo "waiting for db"; sleep 2; done
          psql "$DATABASE_URL" -c 'CREATE EXTENSION IF NOT EXISTS vector;'
      - name: Migrate
        run: python manage.py migrate --noinput
      - name: Test
        run: PYTHONPATH=$PWD pytest --tb=short --disable-warnings

  deploy:
    # only on push to master/staging AND only if tests passed
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/staging') }}
    needs: test
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: true
    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/master' && 'production' || 'staging' }}
    steps:
      - name: Checkout (for rsync filters/.dockerignore)
        uses: actions/checkout@v4

      - name: Sync project to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VM_IP }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          source: "."
          target: "~/apps/agent"
          rm: true

      - name: Deploy on VM (docker compose up --build)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VM_IP }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          command_timeout: 30m
          script: |
            set -euo pipefail
            cd ~/apps/agent

            # Write/update .env for compose
            cat > .env <<'EOF'
            DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            ENVIRONMENT=${{ env.ENVIRONMENT }}
            EOF

            # Optional: run migrations as a one-off task (if your entrypoint doesn't)
            # docker compose run --rm web python manage.py migrate --noinput

            # Build & (re)start
            docker compose pull || true
            docker compose up -d --build --remove-orphans
            docker system prune -f || true

